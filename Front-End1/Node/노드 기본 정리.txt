[노드 실행 과정]
노드 -> 비동기식, 논 블로킹

1. 이벤트 루프는 일종의 감시자라고 생각하면 된다. 어떤 이벤트가 잇는지 계속 감시하고 있는 감시자이고, 이벤트가 감지되면, 그 작업을 위해 작업 스레드를 생성합니다.
2. 작업스레드는 일종의 작업공간 같은 것 입니다. 이벤트를 처리하기 위해 이벤트 루프는 처리 작업을 작업 스레드에게 맡겨버리고 다른 이벤트가 없나 다시 검사하기 시작합니다.
3. 작업 스레드가 작업을 받았을 때, 콜백 함수라는 것을 바든데 콜백 함수란 작업이 끝나면 실행하는 함수입니다.
4. 작업 스레드는 작업을 마치면 이 콜백함수를 실행하고 싶다고 최고 감시작인 이벤트 루프에게 응답을 보냅니다.
   응답을 받은 이벤트 루프는 콜백함수의결과를 클라이언트에 전송하여 우리가 볼 수 있는 결과로 바꾸어 줍니다.
  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
node.js 다운로드
https://nodejs.org
(LTS버전 다운로드)

node.js 버전 확인
cmd 창에서 node -v 명령어로 확인합니다.

npm 버전 확인
cmd 창에서 npm -v 명령어로 확인합니다.


npm init : 옵션을 직접 제공

npm init -y : 기본값을 기준으로 바로 생성

package.json 파일 만들기
모듈을 관리하는 설정파일


노드를 실행하기
node.js 실행하는 방법
node 파일이름



----------------------------------------------------------------------------

FileSystem 모듈
파일처리와 관련된 모듈입니다. 
node.js에서 가장 중요하고 기초가 되는 모듈입니다.

메소드
readFile() : 파일을 비동기적으로 읽습니다.
readFileSync() : 파일을 동기적으로 읽습니다.
writeFile() : 파일을 비동기적으로 씁니다.
writeFileSync() : 파일을 동기적으로 씁니다.

* 동기와 비동기
프로그램이 동작하는 상태에서 완전히 해당 내용을 끝내고 다음으로 제어를 넘기는 방식을 동기식, 
동작이 끝나지 않은 상태에서도 제어권을 넘긴 후 프로그램을 계속 진행하면 비동기식이라고 합니다.

예외 처리(Exception)
프로그램이 실행되고 있는 런타임시에 에러가 발생할 경우 처리할 수 있는 프로그램 구간을 의미합니다
try {
    예외 상황이 발생할 수 있는 문장
    ....
    ....
}catch(e){
    예외 상황이 발생했을 경우 처리할 문장(e는 Exception 객체)
}finally{
    예외 상황이 발생하거나 발생하지 않아도 무조건 실행될 문장(생략가능)
}

이벤트 루프(Event Loop)
node.js는 서버가 가동되면 변수들을 초기화하고 함수를 선언하고 이벤트가 발생할 때까지 기다립니다. 
이벤트가 감지되었을 때 call back 함수를 호출합니다.



---------------------------------------------------------------------------------------------------------
http 모듈
node.js에서 가장 기본적이고 중요한 서버 모듈입니다. 
HTTP 웹 서버를 생성하는 것과 관련된 모든 기능을 담당합니다.

메소드
listen() : 서버를 실행하고 클라이언트를 기다립니다.
close() : 서버를 종료합니다.

2. request 객체
클라이언트가 서버에게 전달하는 메세지(정보)를 담는 객체입니다.

속성
method : 클라이언트 요청 방식을 나타냅니다. (GET, POST)
url : 클라이언트가 요청한 URL을 나타냅니다.

3. response 객체
서버에서 클라이언트로 응답 메세지를 전송시켜주는 객체입니다.

메소드
writeHead() : 응답 헤더를 작성합니다.
end() : 응답 본문을 작성합니다.

MIME 형식
text/plain : 일반적인 text 파일
text/html : html 형식 파일
text/css : css 형식 파일
text/xml : xml 형식 파일
image/jpeg : jpeg 이미지 파일
image/png : png 이미지 파일
video/mpeg : mpeg 동영상 파일
audio/mp3 : mp3 음악 파일
...


---------------------------------------------------------------------------------------
events
이벤트 위주의 프로그램을 작성할 때 사용하는 모듈입니다.

메소드
on() : 지정한 이벤트의 리스너를 추가합니다.
once() : 지정한 이벤트의 리스너를 추가하지만 한번 실행 이후 자동 제거됩니다.
removelistener() : 지정한 이벤트에 대한 리스너를 제거합니다.
emit() : 지정한 이벤트를 발생시킵니다.

시스템 이벤트
process 객체는 노드에서 항상 사용할 수 있는 객체입니다. 
on()과 emit() 메소드는 객체를 생성하거나 모듈을 가져오지 않아도 바로 사용할 수 있습니다. 
on() 메소드를 호출하면서 이벤트 이름을 exit로 지정하면 내부적으로 프로세스가 끝날 때를 알 수 있습니다.




----------------------------------------------------------------------------------------------\
익스프레스 모듈
http 모듈만 사용해서 웹 서버를 구성하면 직접 많은 기능을 개발해야 합니다. 
이 문제를 해결하기 위해 만들어진 모듈이 익스프레스입니다. 
익스프레스 모듈을 사용하면 간단한 코드로 웹 서버의 기능을 대부분 구현할 수 있고, 
미들웨어와 라우터를 사용하여 편리하게 웹 서버를 구성할 수 있습니다.


메소드
use() : 미들웨어 함수를 사용합니다.
get() : get으로 사용자 정보를 전달 받습니다.
set() : 서버 설정을 위한 속성을 설정합니다.
redirect() : 웹 페이지의 경로를 강제로 이동시킵니다.
send() : 클라이언트에 응답 데이터를 보냅니다. 
        전달할 수 있는 데이터는 html, buffer, json, json 배열.. 등입니다.
header() : 헤더를 확인합니다.


[package 설치하기]
npm install 모듈명(npm i 모듈명)
npm i express


package 복원하기
npm install


----------------------------------------------------------------------------------------------------------------
Nodemon
서버 코드를 변경할 때마다 서버를 재시작하도록 하는 모듈
npm install -g nodemon
-g: 글로벌 설치

"scripts": {
    "start": "nodemon 06-4.js"
  },

npm start 라고 실행하고 그다음부터는 저장하기만 해도 서버열지않고 업데이트됨


body-parser(post방식)
설치 npm i body-parser


node.js
const userid = req.query.userid;
http://localhost:3000/?userid=apple

query : 클라이언트에서 GET방식으로 전송한 요청 파라미터를 확인합니다.
body : 클라이언트에서 POST방식으로 전송한 요청 파라미터를 확인합니다.
(단, post방식을 통한 요청 파라미터를 확인하려면 body-parser와 같은 모듈을 사용해야합니다.)

const userid = req.body.userid;


포스트맨 다운로드
https://www.postman.com/downloads/

----------------------------------------------------------------------------------------------------------

Router 미들웨어
사용자의 다양한 요청이 들어왔을때 use() 메소드로 설정한 미들웨어가 항상 호출되는 불편한점이 있습니다. 
이를 해결하고자 사용하는 미들웨어가 Router 미들웨어입니다.

Router 객체 만들기
const 라우터객체 = express.Router();

http://localhost:3000/member/login
라우터객체.route(요청패스).get(실행할 함수);
라우터객체.route(요청패스).post(실행할 함수);

익스프레스에 Router 객체 적용
app.use('/', 라우터객체);



Model View Controller

Model: 데이터베이스
View : 보이는 부분(html,자바스크립트)
Controller : 로직,,,,연산결과 노드의 명령
----------------------------------------------------------------------------------------------------------

[EJS(Embedded JavaScript) 모듈]
EJS 모듈은 템플릿 엔진 모듈입니다. 
템플릿  엔진 모듈은 특정한 형식인 파일로 부터 HTML 페이지를 생성하는 모듈입니다.

설치 npm i ejs

EJS 파일 형식의 특수 코드
<%~ ~~ code ~~~~ %> : 자바스크립트 코드를 입력하는 영역입니다.
<%=변수 또는 값%> : 데이터를 출력합니다.
<%-변수 또는 객체%> : ejs파일 전체를 전달합니다.

EJS 데이터를 전달
render() : 메소드의 매개 변수에 전달하고자 하는 데이터를 입력하여 전달합니다.
ejs.render(data);


[PUG(구 jade)]
http://jade-lang.com/


numjucks
https://www.npmjs.com/package/nunjucks

---------------------------------------------------------------------------------------------------

[Node.js에서 메일 보내기]
nodemailer 모듈
gmail 서버를 이용하여 메일을 보낼 수 있습니다


1. 메일보내기하기전에 설정해야 하는부분

보안 수준이 낮은 앱의 액세스
https://myaccount.google.com/lesssecureapps

계정 액세스 사용을 허용
https://accounts.google.com/DisplayUnlockCaptcha

2.
onst nodemailer객체명 = nodemailer.createTransport({
    service: 'Gmail',
    auth:{
        user: 'gmail 계정',
        pass: '비밀번호'
    },
    host: 'smtp.mail.com',
    port: '465'
});


메일 발송 옵션 설정

const 메일발송옵션객체명 = {
    from: "이름<메일주소>",
    to: "이름<메일주소>",
    subject: "제목",
    text: "내용"
    (html: "HTML코드")
}
-----------------------------------------------------------------------------------------------------


